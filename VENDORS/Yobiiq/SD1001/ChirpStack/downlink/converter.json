{
  "name": "Downlink data converter for Yobiiq SD-1001",
  "type": "DOWNLINK",
  "debugMode": true,
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": null,
    "encoder": "// Encode downlink data from incoming Rule Engine message\n\n// msg - JSON message payload downlink message json\n// msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.\n// metadata - list of key-value pairs with additional data about the message\n// integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter\n\n/** Encoder **/\n\n\n// Process data from incoming message and metadata\nvar input = {\n    fPort : parseInt(metadata.rc_fPort),\n    data : msg,\n    variables: null,\n    devEui : metadata.cs_devEui,\n    applicationId: metadata.cs_applicationId,\n};\n\n// Result object with encoded downlink payload\nvar result = {\n\n    // downlink data content type: JSON, TEXT or BINARY (base64 format)\n    contentType: \"TEXT\",\n\n    // downlink data\n    data: bytesToBase64(encodeDownlink(input).bytes),\n\n    // Optional metadata object presented in key/value format\n    metadata: {\n            DevEUI: input.devEui,\n            fPort: input.fPort,\n    }\n\n};\n\n\nreturn result;\n\nfunction bytesToBase64(bytes) {\n  var binary = '';\n  for (var i = 0; i < bytes.length; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n\n\n/************************************************************************************************************/\n\n// Encode encodes the given object into an array of bytes. (ChirpStack v3)\n//  - fPort contains the LoRaWAN fPort number\n//  - obj is an object, e.g. {\"temperature\": 22.5}\n//  - variables contains the device variables e.g. {\"calibration\": \"3.5\"} (both the key / value are of type string)\n// The function must return an array of bytes, e.g. [225, 230, 255, 0]\nfunction Encode(fPort, obj, variables) {\n    // Constants for downlink\n    var CONFIG_DOWNLINK = {\n        TYPE    : \"Type\",\n        CONFIG  : \"Config\"\n    };\n\n    try\n    {\n        if(obj[CONFIG_DOWNLINK.TYPE] == CONFIG_DOWNLINK.CONFIG)\n        {\n            return encodeDeviceConfiguration(obj[CONFIG_DOWNLINK.CONFIG], variables);\n        }\n    }catch(error)\n    {\n\n    }\n    return [];\n}\n\n// Encode downlink function. (ChirpStack v4 , TTN)\n//\n// Input is an object with the following fields:\n// - data = Object representing the payload that must be encoded.\n// - variables = Object containing the configured device variables.\n//\n// Output must be an object with the following fields:\n// - bytes = Byte array containing the downlink payload.\nfunction encodeDownlink(input) {\n    return {\n        bytes: Encode(null, input.data, input.variables)\n    };\n}\n\n\n/************************************************************************************************************/\n\n\nfunction encodeDeviceConfiguration(objArray, variables)\n{\n    // Constants for device configuration \n    var CONFIG_DEVICE = {\n        PORT : 50,\n        CHANNEL : parseInt(\"0xFF\", 16),\n        TYPES : {\n            \"reportingInterval\" : {TYPE : parseInt(\"0x03\", 16), SIZE : 2, MIN : 1, MAX : 65535,},\n            \"smokeDetector\" : {TYPE : parseInt(\"0x00\", 16), SIZE : 1, MIN : 0, MAX : 1,},\n            \"silenceBuzzer\" : {TYPE : parseInt(\"0x0A\", 16), SIZE : 2, MIN : 0, MAX : 65535,},\n            \"confirmedUplink\" : {TYPE : parseInt(\"0x01\", 16), SIZE : 1, MIN : 0, MAX : 1,},\n        }\n    };\n    var encoded = [];\n    var index = 0;\n    var field = [\"Param\", \"Value\"];\n    try\n    {\n        for(var i=0; i<objArray.length; i=i+1)\n        {\n            var obj = objArray[i];\n            var config = CONFIG_DEVICE.TYPES[obj[field[0]]];\n            var value = obj[field[1]];\n            if(obj[field[1]] >= config.MIN && obj[field[1]] <= config.MAX)\n            {\n                encoded[index] = CONFIG_DEVICE.CHANNEL;\n                index = index + 1;\n                encoded[index] = config.TYPE;\n                index = index + 1;\n                if(config.SIZE == 1)\n                {\n                    encoded[index] = value;\n                    index = index + 1;\n                }else if(config.SIZE == 2)\n                {\n                    switch(config.TYPE)\n                    {\n                        case 3: // reporting interval\n                            var lowByte = value % 256;\n                            encoded[index] = ((lowByte & parseInt(\"0x0F\", 16)) << 4) +  (lowByte >> 4);\n                            index = index + 1;\n                            encoded[index] = (value >> 8) % 256;\n                            index = index + 1;\n                            break;\n                        default:\n                            encoded[index] = (value >> 8) % 256;\n                            index = index + 1;\n                            encoded[index] = value % 256;\n                            index = index + 1;\n                            break;\n                    }\n                }\n            }else\n            {\n                // Error\n                return [];\n            }\n        }\n    }catch(error)\n    {\n        // Error\n        return [];\n    }\n    return encoded;\n}",
    "tbelEncoder": "// Encode downlink data from incoming Rule Engine message\n\n// msg - JSON message payload downlink message json\n// msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.\n// metadata - list of key-value pairs with additional data about the message\n// integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter\n\n/** Encoder **/\n\n// Constants for device configuration\nvar CONFIG_DEVICE = {\n    PORT: 50,\n    CHANNEL: 0xFF,\n    TYPES: {\n        \"reportingInterval\": { TYPE: 0x03, SIZE: 2, MIN: 1, MAX: 65535 },\n        \"smokeDetector\": { TYPE: 0x00, SIZE: 1, MIN: 0, MAX: 1 },\n        \"silenceBuzzer\": { TYPE: 0x0A, SIZE: 2, MIN: 0, MAX: 65535 },\n        \"confirmedUplink\": { TYPE: 0x01, SIZE: 1, MIN: 0, MAX: 1 }\n    }\n};\n\n// Constants for downlink\nvar CONFIG_DOWNLINK = {\n    TYPE: \"Config\",\n    CONFIG: \"Config\"\n};\n\n// Process data from incoming message and metadata\nvar input = {\n    data : msg,\n    variables : null,\n    applicationId: metadata.cs_applicationId,\n};\n\n// Result object with encoded downlink payload\nvar result = {\n\n    // downlink data content type: JSON, TEXT or BINARY (base64 format)\n    contentType: \"JSON\",\n\n    // downlink data\n    data: bytesToBase64(encodeDownlink(input)),\n\n    // Optional metadata object presented in key/value format\n    metadata: {\n        eui: metadata.cs_eui,\n        fPort: metadata.cs_fPort\n    }\n\n};\n\n\nreturn result;\n\n// Function to encode device configuration\nfunction encodeDeviceConfiguration(configs) {\n    foreach(configObj : configs) {\n        var param = configObj[\"Param\"];\n        var value = configObj[\"Value\"];\n        var config = CONFIG_DEVICE.TYPES[param];\n        \n        if(config == null) {\n            return [];\n        }\n        \n        if(value < config.MIN || value > config.MAX) {\n            return [];\n        }\n        \n        var encoded = [];\n        encoded.push(CONFIG_DEVICE.CHANNEL);\n        encoded.push(config.TYPE);\n        \n        if (config.SIZE == 1) {\n            encoded.push(value & 0xFF);\n        } else if (config.SIZE == 2) {\n            if (config.TYPE == 0x03) { // reportingInterval\n                var lowByte = value & 0xFF;\n                var firstByte = ((lowByte & 0x0F) << 4) | (lowByte >> 4);\n                var secondByte = (value >> 8) & 0xFF;\n                encoded.push(firstByte);\n                encoded.push(secondByte);\n            } else {\n                var highByte = (value >> 8) & 0xFF;\n                var lowByte = value & 0xFF;\n                encoded.push(highByte);\n                encoded.push(lowByte);\n            }\n        }\n        \n        return encoded;\n    }\n\n    return [];\n}\n\n// Function to encode the main object\nfunction Encode(fPort, obj, variables) {\n    if (obj[\"Type\"] == CONFIG_DOWNLINK.TYPE) {\n         return encodeDeviceConfiguration(obj[\"Config\"]);\n    }\n    \n    return [];\n}\n\n// Function to encode downlink\nfunction encodeDownlink(input) {\n    return Encode(null, input.data, input.variables);\n}",
    "updateOnlyKeys": [
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "deviceProfileId",
      "deviceProfileName",
      "devEui",
      "devAddr",
      "fPort",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "battery",
      "pir",
      "daylight",
      "confirmed",
      "gatewayId",
      "channel",
      "rfChain",
      "crcStatus"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}